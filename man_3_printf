.TH man 3 "25 october 2020" "0.1" "_printf man page"
.SH NAME
_printf
- formatted output conversion (clone of libc's printf for Holberton School)
.SH SYNOPSIS
.B #include \(dqholberton.h\(dq
.br

.br
.BI "int _printf(const char *" format ", ...);"
.SH DESCRIPTION
The function
.B _printf()
produces output according to a
.I format
as described below.
.B_printf()
write output to
.IR stdout ,
the standard output stream.
.SS Return value
Upon successful return, 
.B _printf()
returns the number of characters printed (excluding the null byte used to end output to strings).
.br
If an output error is encountered, a negative value is returned.
.SS Format of the format string
The format string is a character string. The format string is composed of zero or more directives: ordinary characters (not
.BR % )
, which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.
Each conversion specification is introduced by the character
.BR % ,
and ends with a
.I conversion 
.IR specifier .
In between there may be (in this order) zero or more
.IR flags ,
an optional minimum
.I field
.IR width ,
an optional
.I precision
and an optional
.I length
.IR modifier .
.br
The arguments must correspond properly (after type promotion) with the conversion specifiers. By default, the arguments are used in the order given,
where each '*' and each conversion specifier asks for the next argument (and it is an error if insufficiently many arguments are given).
.SS The flag characters
The character % is followed by zero or more of the following flags:
.TP
.B Our function does not yet support flags
.SS The field width
An optional decimal digit string (with nonzero first digit) specifying a minimum field width. If the converted value has fewer characters
than the field width, it will be padded with spaces on the left.
.SS The precision
An optional precision, in the form of a period ('.') followed by an optional decimal digit string.
.SS The length modifier
Here, "integer conversion" stands for
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
.B X
conversion.
.TP
.B Our function does not yet support length modifiers
.SS The conversion specifier
A character that specifies the type of conversion to be applied. The conversion specifiers and their meanings are:
.TP
.B c
If no
.B l
modifier is present, the
.I int
argument is converted to an
.I unsigned
.I char
, and the resulting character is written.
.TP
.BR s
If no l modifier is present: The 
.I const
.I char
.I *
is expected to be a pointer to an array of character type (pointer to a string). Characters from the array are written up to (but not including) a terminating null byte ('\0')
.TP
.BR d ", " i
The
.I int
argument is converted to signed decimal notation. The precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer digits,
it is padded on the left with zeros. The default precision is 1. When 0 is printed with an explicit precision 0, the output is empty.
.TP
.B %
A '%' is written. No argument is converted. The complete conversion specification is '%%'.
.SH NOTES
Notes go here
.SH SEE ALSO
.BR printf (3)
.SH AUTHORS
Pierre Forcioli
.br
Thibaud Poncin
